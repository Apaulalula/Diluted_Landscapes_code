# this script reads landscapes generated by `generate_landscpaes.R` and 
# reclassifies patch states according to their neighbourhood as:
#  0 = destroyed
#  1 = forest patch with no forest neighbours
#  2 = forest patch with 1 forest neighbour
#  3 = forest patch with 2 forest neighbours
#  4 = forest patch with 3 forest neighbours
#  5 = forest patch with 4 forest neighbours

# load packages
using DelimitedFiles, CSV

# function for finding patch neighbourhood
function setup_neighborhood(i, j, n)

	# Von Neumann neighborhood
	neigh = [i+0 j-1
			 i-1 j+0
			 i+1 j+0
			 i+0 j+1]
  
	# Moore's neighborhood
	#neigh = [i-1 j-1
	#         i+0 j-1
	#         i+1 j-1
	#         i-1 j+0
	#         i+1 j+0
	#  	      i-1 j+1
	#         i+0 j+1
	#         i+1 j+1]
  
	# remove non-existent neighbours
	neigh = neigh[(neigh[:,1].>=1) .& (neigh[:,2].>=1) .& (neigh[:,1].<=n) .&(neigh[:,2].<=n),:]
  
	return neigh
end

# function for reclassifying patch state according to patch neighbourhood
function setup_landscapes(forestCover, pvalue)

	# get generated landscape
	landscape = readdlm(string("../../Data/landscapes/forestcover_",forestCover,"_pvalue_",pvalue,".csv"), Int)

	# number of patches
	n_patch = size(landscape, 1)

	# landscape size
	n = Int(sqrt(n_patch))

	# landscape with x and y coordinates
	landscapeXY = hcat(landscape, string.(repeat(1:n,outer=n),"-",repeat(1:n,inner=n)))

	# grid of patch states (0=destroyed, 1=forest)
	x_state = reshape(landscape, (n,n))

	# grid of redefined patch states
	x_state_new = zeros(Int, (n,n))

	for i = 1:n
		for j = 1:n
			
			if x_state[i,j] == 0
				continue

			else 
				# find patch neighbourhood
				neigh = setup_neighborhood(i, j, n)
				neigh = string.(neigh[:,1],"-",neigh[:,2])
			
				# patch numbers of neighbours
				neigh_no = findall(x-> x in neigh, landscapeXY[:,2])
			
				# number of forest neighbours
				x_state_new[i,j] = sum(landscapeXY[neigh_no,1]) + 1
			
			end 

		end # j loop
	end # i loop

	# landscape as vector
	landscape_new = reshape(x_state_new, n_patch)

	# write out new landscape
	writedlm(string("../../Data/landscapes/forestcover_",forestCover,"_pvalue_",pvalue,"_edge.csv"), landscape_new, ',')

	return 0 
end

# run setup_landscapes
setup_landscapes(0.1, 0.01)
setup_landscapes(0.1, 0.25)
setup_landscapes(0.1, 0.5)
setup_landscapes(0.3, 0.01)
setup_landscapes(0.3, 0.25)
setup_landscapes(0.3, 0.5)
setup_landscapes(0.5, 0.01)
setup_landscapes(0.5, 0.25)
setup_landscapes(0.5, 0.5)
setup_landscapes(0.7, 0.01)
setup_landscapes(0.7, 0.25)
setup_landscapes(0.7, 0.5)
setup_landscapes(1, 0)
